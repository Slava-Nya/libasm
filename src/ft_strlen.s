section .text
    global _ft_strlen   ; запуск линкера

 _ft_strlen:    ;size_t		ft_strlen(char const *str);
    mov     rax, 0 ; копируем 0 в регистр rax(регистр аккумулятор, общее назначение)

    .loop: ; цикл
    cmp     byte [rdi + rax],0  ; аналог while (str[i]), rdi - регистр данных для промежут. значений
    je      .return ; jump to return if equal 0  (если находим 0, ретерним значение ret)
    inc     rax ; инкрементнируем rax
    jmp     .loop ; jump в новую итерацию цикла

    .return:
    ret ;вернуть rax

; rdi - первый аргумент
; rsi - второй аргумент
; rdx - третий аргумент
; rcx - четвёртый аргумент
; r8 - пятый аргумент
; r9 - шестой аргумент

; rsp указывает на вершину стека,
; rcx играет роль счетчика,
; а в rax записывается
; результат выполнения операции или процедуры